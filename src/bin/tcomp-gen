#!/usr/bin/env python3

import sys
import os

# NOTE to my future self: Update the version if the code is changed
VERSION = "1.0.1"

def print_help():
  print("""
Theom Compositor Configuration Generator - Picom

Usage:
  tcomp-gen [OPTION]

Options:
  --help        Show this help message and exit
  --version     Print version information
  --generate [CONFIGs...] OUTDIR
                Generate picom config by merging JSON files into OUTDIR
""", file=sys.stderr)

def load_config(path):
    with open(path) as f:
        return f.read()

def merge_configs(a, b):
    return a + b

def merge_all_configs(paths):
    if not paths:
        return {}

    merged = load_config(paths[0])
    for path in paths[1:]:
        override = load_config(path)
        merged = merge_configs(merged, override)
    return merged

def save_config(config_str, out_dir):
    path = os.path.join(out_dir, "picom.conf")
    with open(path, "w") as f:
        f.write(config_str)
    print(f"Written to {path}")

def generate_config(config_paths, out_dir):
    config_string = merge_all_configs(config_paths)
    save_config(config_string, out_dir)

def main():
    args = sys.argv[1:]

    if not args:
        print("No options provided.")
        print("Pass the '--help' flag to see what all options are available.")
        sys.exit(1)

    cmd = args[0]

    if cmd == "--help" or cmd == "-h":
        print_help()
        sys.exit(0)
    elif cmd == "--version" or cmd == "-v":
        print(f"Theom Compositor Configuration Generator {VERSION} Â© 2025 Byson94")
        sys.exit(0)
    elif cmd == "--generate" or cmd == "-g":
        if len(args) < 3:
            print("Invalid use of '--generate'! Provide at least one CONFIG path and the output directory.")
            sys.exit(1)

        *config_paths, out_dir = args[1:]

        for path in config_paths:
            if not os.path.exists(path):
                print(f"'{path}' file not found.")
                sys.exit(1)

        if not os.path.isdir(out_dir):
            try:
                os.makedirs(out_dir, exist_ok=True)
                print(f"Created directory: {out_dir}")
            except Exception as e:
                print(f"Failed to create output directory '{out_dir}': {e}", file=sys.stderr)
                sys.exit(1)

        generate_config(config_paths, out_dir)

    else:
        print("Option not found.")
        print("Pass the '--help' flag to see what all options are available.")
        sys.exit(1)

if __name__ == "__main__":
    main()


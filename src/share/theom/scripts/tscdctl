#!/usr/bin/env python3
import sys
import re
import argparse
import json
from pathlib import Path

TSCL_HEADER = '*//()()//* THEOM SCARY CONFIG DEMON v1 - DO NOT TOUCH *//()()//*'
TSCL_FOOTER = '*//()()//* This file is auto-generated. Do not edit manually.'

LINE_RE = re.compile(r'^&\^\*#(?P<key>[^:]+)::\<&(?P<val>".*?"|[^&]+)&>$')
COMMENT_RE = re.compile(r'\*//\(\)\(\)//\*')

####################### PRINT IMPORTANT INFO
def print_use_info():
    RED = "\033[91m"
    YELLOW = "\033[93m"
    RESET = "\033[0m"

    warning = f"""
    {RED}
                -- THEOM SCARY CONFIG DEMON v1 --
    ##############################################################
    ## TSCDCTL HAS BEEN INVOKED                                 ##
    ##                                                          ##
    ## THIS TOOL IS PART OF THE T.S.C.D. INTERNAL SYSTEM        ##
    ## IT IS NOT MEANT FOR HUMAN INTERACTION.                   ##
    ##                                                          ##
    ## NO GUARANTEES. NO HELP. NO WARRANTY.                     ##
    ##                                                          ##
    ## >> Proceed if you are developing THEOM.                  ##
    ## >> Otherwise, press Ctrl+C and walk away.                ##
    ##############################################################
    {RESET}
    """

    print(warning, file=sys.stderr)

print_use_info()

####################### END OF IMPORTANT INFO

def infer_type(val):
    return val

def parse_tscl(path):
    data = {}
    if not path.exists():
        print(f'[TSCL] File not found: {path}', file=sys.stderr)
        return data

    with open(path, 'r', encoding='utf-8') as f:
        for raw_line in f:
            line = raw_line.strip()
            if COMMENT_RE.fullmatch(line):
                continue
            if line == TSCL_HEADER or line == TSCL_FOOTER or not line:
                continue

            m = LINE_RE.match(line)
            if not m:
                print(f'[TSCL] Warning: Skipping malformed line: {line}', file=sys.stderr)
                continue
            key = m.group('key').lower().replace('-', '_')
            val_str = m.group('val')
            try:
                if val_str.startswith('"') and val_str.endswith('"'):
                    val = json.loads(val_str)
                else:
                    val = json.loads(val_str.lower())
            except Exception:
                val = val_str.strip('"')
            data[key] = infer_type(val)
    return data

def write_tscl(path, kvpairs):
    with open(path, 'w', encoding='utf-8') as f:
        f.write(TSCL_HEADER + '\n\n')
        for key, val in kvpairs.items():
            val_json = json.dumps(val, ensure_ascii=False)
            f.write(f'&^*#{key}::<&{val_json}&>\n')
        f.write('\n' + TSCL_FOOTER + '\n')

def flip_bool(val):
    if isinstance(val, bool):
        return not val
    if isinstance(val, str):
        low = val.lower()
        if low == 'true':
            return False
        elif low == 'false':
            return True
    return True

def main():
    parser = argparse.ArgumentParser(description='TSCL parser/writer for Theom')
    parser.add_argument('--out', type=Path, required=True, help='Path to TSCL file')

    parser.add_argument('--write', nargs='+', metavar='KEY=VAL', help='Write key=value pairs to TSCL (alias for --set)')
    parser.add_argument('--set', nargs='+', metavar='KEY=VAL', help='Write key=value pairs to TSCL (alias for --write)')
    parser.add_argument('--flip', nargs='+', metavar='KEY', help='Flip boolean key(s) true<->false')
    parser.add_argument('--parse', action='store_true', help='Parse and print all key=value pairs')
    parser.add_argument('--get', metavar='KEY', help='Get value of a single key')


    args = parser.parse_args()
    tscl_path = args.out

    if not any([args.write, args.set, args.flip, args.parse, args.get]):
        parser.error('One of --write, --set, --flip, --parse or --get is required.')

    if args.parse:
        data = parse_tscl(tscl_path)
        for k in sorted(data.keys()):
            print(f'{k}={data[k]}')
        sys.exit(0)

    if args.get:
        data = parse_tscl(tscl_path)
        key = args.get.lower().replace('-', '_')
        if key not in data:
            print(f'Key "{key}" not found', file=sys.stderr)
            sys.exit(1)
        print(data[key])
        sys.exit(0)

    data = parse_tscl(tscl_path)

    kvpairs = {}
    if args.write:
        kvpairs = args.write
    elif args.set:
        kvpairs = args.set

    if kvpairs:
        new_data = {}
        for kv in kvpairs:
            if '=' not in kv:
                print(f'Invalid key=value pair: {kv}', file=sys.stderr)
                sys.exit(1)
            key, val = kv.split('=', 1)
            key = key.strip().lower().replace('-', '_')
            val = val.strip()
            try:
                val_parsed = json.loads(val)
            except Exception:
                val_parsed = val
            new_data[key] = val_parsed
        data.update(new_data)

    # Process flips
    if args.flip:
        for key in args.flip:
            key = key.lower().replace('-', '_')
            old_val = data.get(key, False)
            data[key] = flip_bool(old_val)

    write_tscl(tscl_path, data)
    print(f'Updated TSCL at {tscl_path} with {len(data)} keys')
    sys.exit(0)

if __name__ == '__main__':
    main()
